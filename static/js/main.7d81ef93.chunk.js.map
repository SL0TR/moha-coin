{"version":3,"sources":["components/Header.js","components/MohaCoinList.js","utils/api.js","components/AddCoin.js","components/Pages/Home.js","serviceWorker.js","index.js","App.js"],"names":["Header","Navbar","bg","expand","variant","Brand","href","MohaCoinList","chain","ListGroup","className","map","block","Item","key","timeStamp","data","amount","blockChainUrl","blockChain","getAll","axios","get","create","toCreate","post","AddCoin","fetchBlockChain","useState","setAmount","registerCoin","e","a","preventDefault","now","Date","date","getDate","getMonth","getFullYear","blockData","api","Form","Group","controlId","Label","Control","value","onChange","target","type","placeholder","Button","onClick","Home","setChain","useEffect","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6LAGe,SAASA,IACtB,OACE,kBAACC,EAAA,EAAD,CAAQC,GAAG,OAAOC,OAAO,KAAKC,QAAQ,QACpC,kBAACH,EAAA,EAAOI,MAAR,CAAcC,KAAK,SAAnB,a,6CCHS,SAASC,EAAT,GAAkC,IAAVC,EAAS,EAATA,MACrC,OACE,kBAACC,EAAA,EAAD,KACE,uBAAGC,UAAU,yBAAb,kBACCF,GACCA,EAAMG,KAAI,SAAAC,GAAK,OACb,kBAACH,EAAA,EAAUI,KAAX,CAAgBH,UAAU,OAAOI,IAAKF,EAAMG,WAA5C,IACIH,EAAMI,KAAKC,Y,qCCRnBC,EAAa,UADV,wBACU,eAEJ,GACbC,WADa,WAEX,MAAO,CAELC,OAAQ,kBAAMC,IAAMC,IAAIJ,IAExBK,OAAQ,SAAAC,GAAQ,OAAIH,IAAMI,KAAKP,EAAeM,OCNrC,SAASE,EAAT,GAAuC,IAApBC,EAAmB,EAAnBA,gBAAmB,EACvBC,mBAAS,IADc,mBAC5CX,EAD4C,KACpCY,EADoC,KAG7CC,EAAY,uCAAG,WAAMC,GAAN,qBAAAC,EAAA,6DACnBD,EAAEE,iBACIC,EAAM,IAAIC,KACVC,EAHa,UAGHF,EAAIG,UAHD,YAGcH,EAAII,WAAa,EAH/B,YAGoCJ,EAAIK,eACrDC,EAAY,CAChBzB,UAAWqB,EACXpB,KAAM,CACJC,WAPe,SAWIwB,EAAItB,aAAaI,OAAOiB,GAX5B,kBAWXxB,OAGNW,IACAE,EAAU,KAfO,2CAAH,sDAmBlB,OACE,kBAACa,EAAA,EAAD,KACE,kBAACA,EAAA,EAAKC,MAAN,CAAYC,UAAU,QACpB,kBAACF,EAAA,EAAKG,MAAN,eACA,kBAACH,EAAA,EAAKI,QAAN,CACEC,MAAO9B,EACP+B,SAAU,SAAAjB,GACRF,EAAUE,EAAEkB,OAAOF,QAErBG,KAAK,SACLC,YAAY,kBAGhB,kBAACC,EAAA,EAAD,CAAQhD,QAAQ,UAAU8C,KAAK,SAASG,QAASvB,GAAjD,aClCS,SAASwB,IAAQ,IAAD,EACH1B,mBAAS,IADN,mBACtBpB,EADsB,KACf+C,EADe,KAG7BC,qBAAU,WACR7B,MACC,IAEH,IAAMA,EAAe,uCAAG,8BAAAK,EAAA,sEACCS,EAAItB,aAAaC,SADlB,gBACdJ,EADc,EACdA,KACRuC,EAASvC,GAFa,2CAAH,qDAKrB,OACE,yBAAKN,UAAU,QACb,wBAAIA,UAAU,yBAAd,YACA,yBAAKA,UAAU,aACb,kBAACgB,EAAD,CAASC,gBAAiBA,IAC1B,kBAACpB,EAAD,CAAcC,MAAOA,M,MCVTiD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,mBCDD,WACb,OACE,yBAAKrD,UAAU,OACb,kBAACV,EAAD,MACA,kBAACsD,EAAD,SDHU,MAASU,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.7d81ef93.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Navbar, Nav } from \"react-bootstrap\";\r\n\r\nexport default function Header() {\r\n  return (\r\n    <Navbar bg=\"dark\" expand=\"lg\" variant=\"dark\">\r\n      <Navbar.Brand href=\"#home\">MohaCoin</Navbar.Brand>\r\n      {/* <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n      <Navbar.Collapse id=\"basic-navbar-nav\">\r\n        <Nav className=\"mr-auto\">\r\n          <Nav.Link href=\"#home\">Home</Nav.Link>\r\n          <Nav.Link href=\"#link\">Login</Nav.Link>\r\n        </Nav>\r\n      </Navbar.Collapse> */}\r\n    </Navbar>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { ListGroup } from \"react-bootstrap\";\r\n\r\nexport default function MohaCoinList({ chain }) {\r\n  return (\r\n    <ListGroup>\r\n      <p className=\"lead text-center my-4\">MohaCoin List!</p>\r\n      {chain &&\r\n        chain.map(block => (\r\n          <ListGroup.Item className=\"my-2\" key={block.timeStamp}>\r\n            ${block.data.amount}\r\n          </ListGroup.Item>\r\n        ))}\r\n    </ListGroup>\r\n  );\r\n}\r\n","import axios from \"axios\";\r\nconst url = `http://localhost:4000`;\r\nconst blockChainUrl = `${url}/blockchain`;\r\n\r\nexport default {\r\n  blockChain() {\r\n    return {\r\n      // getOne: ({ id }) => axios.get(`${url}/${id}`),\r\n      getAll: () => axios.get(blockChainUrl),\r\n      // update: (toUpdate) =>  axios.put(url,toUpdate),\r\n      create: toCreate => axios.post(blockChainUrl, toCreate)\r\n      // delete: ({ id }) =>  axios.delete(`${url}/${id}`)\r\n    };\r\n  }\r\n};\r\n","import React, { useState } from \"react\";\r\nimport { Form, Button } from \"react-bootstrap\";\r\nimport api from \"../utils/api\";\r\n\r\nexport default function AddCoin({ fetchBlockChain }) {\r\n  const [amount, setAmount] = useState(\"\");\r\n\r\n  const registerCoin = async e => {\r\n    e.preventDefault();\r\n    const now = new Date();\r\n    const date = `${now.getDate()}/${now.getMonth() + 1}/${now.getFullYear()}`;\r\n    const blockData = {\r\n      timeStamp: date,\r\n      data: {\r\n        amount\r\n      }\r\n    };\r\n\r\n    const { data } = await api.blockChain().create(blockData);\r\n\r\n    if (data) {\r\n      fetchBlockChain();\r\n      setAmount(\"\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Form>\r\n      <Form.Group controlId=\"data\">\r\n        <Form.Label>Amount</Form.Label>\r\n        <Form.Control\r\n          value={amount}\r\n          onChange={e => {\r\n            setAmount(e.target.value);\r\n          }}\r\n          type=\"number\"\r\n          placeholder=\"Enter Amount\"\r\n        />\r\n      </Form.Group>\r\n      <Button variant=\"primary\" type=\"submit\" onClick={registerCoin}>\r\n        Add Coin\r\n      </Button>\r\n    </Form>\r\n  );\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport MohaCoinList from \"../MohaCoinList\";\r\nimport AddCoin from \"../AddCoin\";\r\nimport api from \"../../utils/api\";\r\n\r\nexport default function Home() {\r\n  const [chain, setChain] = useState([]);\r\n\r\n  useEffect(() => {\r\n    fetchBlockChain();\r\n  }, []);\r\n\r\n  const fetchBlockChain = async () => {\r\n    const { data } = await api.blockChain().getAll();\r\n    setChain(data);\r\n  };\r\n\r\n  return (\r\n    <div className=\"mt-5\">\r\n      <h1 className=\"text-center display-3\">Welcome!</h1>\r\n      <div className=\"container\">\r\n        <AddCoin fetchBlockChain={fetchBlockChain} />\r\n        <MohaCoinList chain={chain} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\nimport Header from './components/Header';\nimport Home from './components/Pages/Home';\n\n\nexport default function App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <Home />\n    </div>\n  );\n}\n\n"],"sourceRoot":""}